name: Publish
on:
  push:
    tags: 
    - 'v*'

jobs:
    test_and_sync: 
        name: Test and sync
        runs-on: ubuntu-latest
        steps:
            - name: Test and sync
            - uses: apify/fingerprint-suite/.github/workflows/test-and-sync.yml

    publish_prerelease:
        name: Publish prerelease
        if: |
            !contains(github.event.head_commit.message, '[skip publish]')
            && (github.ref == 'refs/heads/master')
        runs-on: ubuntu-latest
        needs: [ test_and_sync ]
        steps:
            -   name: Checkout Source code
                uses: actions/checkout@v3

            -   name: Use Node.js 16
                uses: actions/setup-node@v3
                with:
                    node-version: 16
                    cache: 'npm'
                    cache-dependency-path: 'package-lock.json'

            -   name: Turbo cache
                id: turbo-cache
                uses: actions/cache@v3
                with:
                    path: .turbo
                    key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ github.sha }}
                    restore-keys: |
                        turbo-${{ github.job }}-${{ github.ref_name }}-

            -   name: Install Dependencies
                run: npm ci

            -   name: Check for changes
                id: changed_packages
                run: |
                    echo "::set-output name=changed_packages::$(node ./node_modules/.bin/lerna changed -p | wc -l | xargs)"

            -   name: Check for changes 2
                if: steps.changed_packages.outputs.changed_packages == '0'
                run: |
                    echo "no changes detected by lerna"

            -   name: Build
                if: steps.changed_packages.outputs.changed_packages != '0'
                run: npm run build
              
            -   name: Create a GH release from tag
                uses: "marvinpinto/action-automatic-releases@latest"
                with:
                    repo_token: "${{ secrets.GH_TOKEN }}"
                    prerelease: true
                

            -   name: Release dev version for testing
                if: env.RELEASE_TAG == 'next' && steps.changed_packages.outputs.changed_packages != '0'
                run: |
                    git config --global user.name 'Apify Release Bot'
                    git config --global user.email 'noreply@apify.com'
                    npx turbo run copy --force -- -- --canary --preid=dev
                    git commit -am 'chore: bump canary versions [skip ci]'

                    echo "access=public" >> .npmrc
                    echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
                    npm run publish:next -- --yes --no-verify-access
                env:
                    NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
                    GIT_USER: "noreply@apify.com:${{ secrets.GH_TOKEN }}"
                    GH_TOKEN: ${{ secrets.GH_TOKEN }}

    publish_latest:
        name: Publish latest
        if: |
            !contains(github.event.head_commit.message, '[skip publish]') 
            && (github.ref == 'refs/heads/stable')
        runs-on: ubuntu-latest
        needs: [ test_and_sync ]
        steps:
            -   name: Checkout Source code
                uses: actions/checkout@v3
                with:
                    token: ${{ secrets.GH_TOKEN }}

            -   name: Use Node.js 16
                uses: actions/setup-node@v3
                with:
                    node-version: 16
                    cache: 'npm'
                    cache-dependency-path: 'package-lock.json'

            -   name: Turbo cache
                id: turbo-cache
                uses: actions/cache@v3
                with:
                    path: .turbo
                    key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ github.sha }}
                    restore-keys: |
                        turbo-${{ github.job }}-${{ github.ref_name }}-

            -   name: Install Dependencies
                run: npm ci

            -   name: Check for changes
                id: changed_packages
                run: |
                    echo "::set-output name=changed_packages::$(node ./node_modules/.bin/lerna changed -p | wc -l | xargs)"

            -   name: Check for changes 2
                if: steps.changed_packages.outputs.changed_packages == '0'
                run: |
                    echo "no changes detected by lerna"

            -   name: Build
                if: steps.changed_packages.outputs.changed_packages != '0'
                run: npm run build

            -   name: Create a GH release from tag
                uses: "marvinpinto/action-automatic-releases@latest"
                with:
                    repo_token: "${{ secrets.GH_TOKEN }}"
                    prerelease: false

            -   name: Release latest version
                if: steps.changed_packages.outputs.changed_packages != '0'
                run: |
                    git config --global user.name 'Apify Release Bot'
                    git config --global user.email 'noreply@apify.com'

                    echo "access=public" >> .npmrc

                    echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
                    lerna publish from-package --contents dist --force-publish --yes --no-verify-access
                env:
                    NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
                    GIT_USER: "noreply@apify.com:${{ secrets.GH_TOKEN }}"
                    GH_TOKEN: ${{ secrets.GH_TOKEN }}
